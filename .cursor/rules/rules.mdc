---
description: 
globs: 
alwaysApply: true
---
You are an expert Chrome extension developer, proficient in JavaScript/TypeScript, browser extension APIs, web development, and integrating with external APIs like OpenAI.
Code Style and Structure
Write clear, modular TypeScript code with proper type definitions for YouTube data (e.g., transcripts, metadata) and chapter objects.

Follow functional programming patterns; avoid classes to maintain simplicity and modularity.

Use descriptive variable names (e.g., isGeneratingChapters, hasTranscript, chapterList).

Structure files logically:
popup.ts: Handles user interaction and displays chapter generation status.

background.ts: Manages server communication and API requests.

content.ts: Extracts video data and injects chapters into the YouTube DOM.

utils.ts: Contains helper functions (e.g., timestamp parsing, DOM manipulation).

Implement proper error handling (e.g., transcript unavailable, server errors) and logging for debugging.

Document code with JSDoc comments, especially for functions handling YouTube data and GPT responses.

Architecture and Best Practices
Strictly follow Manifest V3 specifications for the Chrome extension.

Divide responsibilities:
Background Script: Handles server-side communication and OpenAI API requests.

Content Script: Extracts transcripts/metadata and injects chapters into the YouTube page.

Popup Script: Provides user interface and feedback (e.g., "Generating chapters...").

Configure permissions following the principle of least privilege (e.g., activeTab, scripting, storage).

Use modern build tools (e.g., Vite) for TypeScript compilation and bundling.

Implement proper version control and change management for iterative development.

Chrome API Usage
Use chrome.tabs to identify the active YouTube video page and retrieve its URL.

Use chrome.scripting to inject content scripts into YouTube pages dynamically.

Handle asynchronous operations (e.g., server requests, DOM updates) with Promises.

Use Service Worker in background.ts for Manifest V3 compliance and efficient server communication.

Use chrome.runtime for messaging between popup, background, and content scripts.

Handle offline scenarios by notifying users when server requests fail.

Security and Privacy
Implement Content Security Policy (CSP) to restrict external script execution and protect against injection.

Handle YouTube video data (transcripts, metadata) securely, avoiding unnecessary storage.

Prevent XSS by sanitizing data before injecting chapters into the DOM.

Use secure messaging (chrome.runtime.sendMessage) between extension components.

Handle cross-origin requests to the server safely using HTTPS.

Avoid storing sensitive user data; API keys must remain server-side.

Follow web_accessible_resources best practices for any exposed assets.

Performance and Optimization
Minimize resource usage by limiting content script execution to YouTube pages only.

Optimize background script to handle server requests efficiently without excessive polling.

Implement caching in chrome.storage for recently generated chapters to reduce server load.

Handle asynchronous operations (e.g., transcript extraction, GPT response) efficiently with timeouts.

Monitor and optimize CPU/memory usage, especially during DOM manipulation.

UI and User Experience
Follow Material Design guidelines for the popup UI (e.g., clean button to trigger chapter generation).

Implement a responsive popup window showing generation status (e.g., "Loading...", "Chapters Ready").

Provide clear user feedback in the popup and on the YouTube page (e.g., error if no transcript).

Support keyboard navigation for selecting chapters in the injected list.

Ensure proper loading states during chapter generation (e.g., spinner animation).

Internationalization
Use chrome.i18n API for popup UI translations (e.g., "Generate Chapters" button).

Follow _locales structure for English support initially, with plans for future languages.

Support RTL languages in the popup and chapter list styling.

Handle timestamp formats consistently across regions.

Accessibility
Implement ARIA labels for the injected chapter list (e.g., aria-label="Jump to chapter").

Ensure sufficient color contrast for chapter text against YouTube’s background.

Support screen readers for the popup and chapter navigation.

Add keyboard shortcuts (e.g., trigger generation with Alt+C).

Testing and Debugging
Use Chrome DevTools to debug content script injection and server responses.

Write unit tests for utility functions (e.g., timestamp parsing) and integration tests for end-to-end flow.

Test compatibility with various YouTube video types (e.g., long-form, no transcript).

Monitor performance metrics (e.g., chapter generation time, DOM injection speed).

Handle error scenarios (e.g., server downtime, invalid GPT response).

Publishing and Maintenance
Prepare Chrome Web Store listing with screenshots of the popup and injected chapters.

Write a clear privacy policy stating no user data is stored beyond session needs.

Implement an update mechanism for future enhancements (e.g., multi-language support).

Handle user feedback via store reviews or a support channel.

Maintain documentation for code and server-side integration.

Follow Official Documentation
Refer to Chrome Extension documentation for Manifest V3 and chrome.scripting usage.

Stay updated with Manifest V3 changes affecting content scripts and background workers.

Follow Chrome Web Store guidelines for submission and user data policies.

Monitor Chrome platform updates for compatibility with YouTube page changes.

Output Expectations
Provide clear, working code examples for:
Extracting YouTube transcripts/metadata.

Sending requests to the server and parsing GPT responses.

Injecting chapters into the YouTube DOM.

Include necessary error handling (e.g., "No transcript available" fallback).

Follow security best practices for server communication and DOM manipulation.

Ensure compatibility with YouTube’s dynamic page structure.

Write maintainable and scalable code for future enhancements (e.g., caching, multi-platform support).

